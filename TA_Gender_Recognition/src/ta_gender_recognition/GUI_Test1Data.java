/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ta_gender_recognition;

import Methods.CsvUtils;
import Methods.FaceDetector;
import Methods.Normalization;
import Methods.PCA;
import Methods.SPM_Centrist;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import static ta_gender_recognition.GUI.PATH_HEADER_DATASET;
import static ta_gender_recognition.GUI.PATH_HEADER_TRAINING;
import static ta_gender_recognition.GUI.PATH_TRAINING;
import static ta_gender_recognition.GUI.classGender;
import static ta_gender_recognition.GUI.getCentristType;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.core.Instances;
import weka.core.converters.ConverterUtils;

/**
 *
 * @author Tuyu
 */
public class GUI_Test1Data extends javax.swing.JFrame {

    private static int pcaK = 40;
    private static double sigma = 0.01;
    private static int block = 31;
    private static int cType = 0;
    private static String centristType = "centrist";
    private static String predImg = PATH_HEADER_DATASET + "\\predict_image\\predImg.jpg";
    private static String searchImg = "";
    private static final int pcaFeatures = 256;

    /**
     * Creates new form GUI_Test1Data
     */
    public GUI_Test1Data() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txt_searchPath = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spin_kPCA = new javax.swing.JSpinner();
        txt_sigma = new javax.swing.JTextField();
        btn_predict = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cb_centristType = new javax.swing.JComboBox<>();
        lbl_img = new javax.swing.JLabel();
        lbl_predict = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_searchPath.setEditable(false);
        txt_searchPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_searchPathActionPerformed(evt);
            }
        });

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        jLabel1.setText("Insert Image");

        jLabel2.setText("K                                    :");

        jLabel3.setText("Sigma                           :");

        spin_kPCA.setValue(40);

        txt_sigma.setText("0.01");
        txt_sigma.setToolTipText("");

        btn_predict.setText("Predict Image");
        btn_predict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_predictActionPerformed(evt);
            }
        });

        jLabel4.setText("Preprocessing Type :");

        cb_centristType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "HE", "BHEP" }));

        lbl_img.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_img.setText("Image Here");
        lbl_img.setToolTipText("");

        lbl_predict.setText("Prediction : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_searchPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_search))
                    .addComponent(btn_predict, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cb_centristType, 0, 101, Short.MAX_VALUE)
                            .addComponent(txt_sigma)
                            .addComponent(spin_kPCA))
                        .addGap(155, 155, 155)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_predict)
                    .addComponent(lbl_img, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_search)
                    .addComponent(txt_searchPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cb_centristType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spin_kPCA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_sigma, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_predict)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_img, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_predict)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_searchPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_searchPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_searchPathActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(PATH_HEADER_DATASET);
        jfc.showOpenDialog(null);

        File file = jfc.getSelectedFile();
        searchImg = file.getAbsolutePath();
        System.out.println("-------------------------------------------------------------------------------------\n");
        System.out.println("Image Path : " + searchImg + "\n");
        txt_searchPath.setText(searchImg);
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_predictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_predictActionPerformed
        // TODO add your handling code here:
        cType = cb_centristType.getSelectedIndex();
        pcaK = (int) spin_kPCA.getValue();
        sigma = Double.parseDouble(txt_sigma.getText());
        switch (cType) {
            case 0:
                centristType = "centrist";
                PATH_TRAINING = PATH_HEADER_TRAINING + "centrist\\k-" + pcaK + "\\";
                break;
            case 1:
                centristType = "centristHE";
                PATH_TRAINING = PATH_HEADER_TRAINING + "centristHE\\k-" + pcaK + "\\";
                break;
            case 2:
                centristType = "centristBHEP";
                PATH_TRAINING = PATH_HEADER_TRAINING + "centristBHEP\\k-" + pcaK + "\\";
                break;
        }

        FaceDetector faceDetector = new FaceDetector();
        Mat[] mats = faceDetector.snipFace(searchImg, new Size(250, 250));
        for (Mat mat : mats) {
            Imgcodecs.imwrite(predImg, mat);
        }

        ImageIcon img = new ImageIcon(predImg);
        lbl_img.setIcon(img);

        SPM_Centrist c = new SPM_Centrist(2);
        c.setType(cb_centristType.getSelectedIndex());
        c.extract(predImg);
        double[] hist = c.getHistogram();

        PCA pca;
        String[] weightTest;
        weightTest = new String[(block * pcaK) + 1];
        for (int j = 0; j < block; j++) {
            try {
                System.out.println("======================================================");
                System.out.println("Predict Image - Block : " + (j + 1));
                double[] tmp = new double[pcaFeatures];
                tmp = Normalization.getChunkArray(hist, pcaFeatures, j);

                pca = new PCA(pcaK, pcaFeatures);
                String[] weight = pca.test(tmp, classGender[0], j);
                System.arraycopy(weight, 0, weightTest, j * pcaK, weight.length);
                weightTest[weightTest.length - 1] = "?";
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        CsvUtils.writeToCSVwithLabel(weightTest, PATH_TRAINING + "pca_test_1data.arff");
        System.out.println("- Saved Predict Image Model\n");
        lbl_img.setIcon(img);
        try {
            testSVM_1data();
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("-------------------------------------------------------------------------------------\n");
    }//GEN-LAST:event_btn_predictActionPerformed

    private void testSVM_1data() throws Exception {
        ConverterUtils.DataSource src = null;
        Instances data_train = null;
        Instances data_test = null;
        Evaluation eva = null;
        double[] prediction = null;
        try {
            src = new ConverterUtils.DataSource(PATH_TRAINING + getCentristType() + "_pca_" + pcaK + "_train.csv");
            data_train = src.getDataSet();
            data_train.setClass(data_train.attribute("class"));
            SMO smo = new SMO();

            //train and build classifier
            RBFKernel rbf = new RBFKernel();
            rbf.setGamma(sigma);
            smo.setKernel(rbf);
            smo.buildClassifier(data_train);

            String modelPath = PATH_TRAINING + "svm_train.model";
            saveModelToFile(modelPath, smo);

            src = new ConverterUtils.DataSource(PATH_TRAINING + "pca_test_1data.arff");
            data_test = src.getDataSet();
            data_test.setClass(data_train.attribute("class"));

            data_test.setClassIndex(data_test.numAttributes() - 1);
            eva = new Evaluation(data_test);
            StringBuffer predsBuffer = new StringBuffer();
            PlainText plainText = new PlainText();
            plainText.setHeader(data_test);
            plainText.setBuffer(predsBuffer);

            //test
            prediction = eva.evaluateModel(smo, data_test, plainText);
            String preds = predsBuffer.toString();
            if (preds.contains(":female")) {
                lbl_predict.setText("Prediction : Female");
                System.out.println("Prediction : Female");
            } else if (preds.contains(":male")) {
                lbl_predict.setText("Prediction : Male");
                System.out.println("Prediction : Male");
            } else {
                lbl_predict.setText("Prediction : Unknown");
                System.out.println("Prediction : Unknown");
            }

        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void saveModelToFile(String filename, SMO model) {
        try {
            weka.core.SerializationHelper.write(filename, model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_Test1Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_Test1Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_Test1Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_Test1Data.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_Test1Data().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_predict;
    private javax.swing.JButton btn_search;
    private javax.swing.JComboBox<String> cb_centristType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lbl_img;
    private javax.swing.JLabel lbl_predict;
    private javax.swing.JSpinner spin_kPCA;
    private javax.swing.JTextField txt_searchPath;
    private javax.swing.JTextField txt_sigma;
    // End of variables declaration//GEN-END:variables
}
